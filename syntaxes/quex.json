{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "version": "1.3.0",
  "fileTypes": ["qx", "quex"],
  "name": "Quex",
  "patterns": [
    {
      "include": "#lit"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#mode.start"
    },
    {
      "include": "#header.section"
    },
    {
      "include": "#define.section"
    },
    {
      "include": "#token.section"
    },
    {
      "include": "#mode.pre"
    },
    {
      "include": "#mode.section"
    },
    {
      "include": "#other"
    }
  ],
  "repository": {
    "define.section": {
      "patterns": [
        {
          "begin": "(^\\s*define\\s*)(\\{)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.section.quex"
            },
            "2": {
              "name": "meta.brace.curly.begin.qx"
            }
          },
          "end": "(^\\})",
          "endCaptures": {
            "1": {
              "name": "meta.brace.curly.end.qx"
            }
          },
          "patterns": [
            {
              "include": "#define.block"
            }
          ]
        }
      ]
    },
    "define.block": {
      "patterns": [
        {
          "begin": "({)",
          "beginCaptures": {
            "1": {
              "name": "meta.brace.curly.begin.qx"
            }
          },
          "end": "(})",
          "endCaptures": {
            "1": {
              "name": "meta.brace.curly.end.qx"
            }
          },
          "contentName": "support.type.property-name.qx"
        },
        {
          "match": "(^\\s*[_a-zA-Z][_a-zA-Z0-9]*\\s*)",
          "name": "constant.regexp.qx"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "source.pcre"
        },
        {
          "include": "#lit"
        }
      ]
    },
    "header.section": {
      "patterns": [
        {
          "begin": "(^\\s*header\\s*)(\\{)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.section.qx"
            },
            "2": {
              "name": "meta.brace.curly.begin.qx"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "meta.brace.curly.end.qx"
            }
          },
          "contentName": "source.cpp.embedded.qx",
          "patterns": [
            {
              "include": "source.cpp"
            }
          ]
        }
      ]
    },
    "lit": {
      "patterns": [
        {
          "begin": "(\\\")",
          "beginCaptures": {
            "1": {
              "name": "string.quoted.double.qx"
            }
          },
          "end": "(\\\")",
          "endCaptures": {
            "1": {
              "name": "string.quoted.double.qx"
            }
          },
          "patterns": [
            {
              "match": "(\\\\(?:\\\\|\"))",
              "name": "string.constant.character.escape.qx"
            },
            {
              "match": "([^\\x{0022}\\x{005c}]+)",
              "name": "string.quoted.double.qx"
            }
          ]
        },
        {
          "match": "(;)",
          "name": "punctuation.terminator.statement.qx"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.qx"
            },
            "2": {
              "name": "comment.line.qx"
            }
          },
          "match": "(//)(.*)"
        },
        {
          "begin": "(/\\*)(.*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.qx"
            },
            "2": {
              "name": "comment.block.qx"
            }
          },
          "contentName": "comment.block.qx",
          "end": "(.*)(\\*/)",
          "endCaptures": {
            "1": {
              "name": "comment.block.qx"
            },
            "2": {
              "name": "punctuation.definition.comment.qx"
            }
          }
        }
      ]
    },
    "mode.code": {
      "patterns": [
        {
          "begin": "({)",
          "beginCaptures": {
            "1": {
              "name": "meta.brace.curly.begin.qx"
            }
          },
          "end": "(})",
          "endCaptures": {
            "1": {
              "name": "meta.brace.curly.end.qx"
            }
          },
          "patterns": [
            {
              "include": "source.cpp"
            },
            {
              "captures": {
                "1": {
                  "name": "variable.language.this.qx"
                },
                "2": {
                  "name": "keyword.operator.dereference.c"
                },
                "3": {
                  "name": "variable.other.dot-access.c"
                }
              },
              "match": "(self)(\\.)([^\\(]*)"
            },
            {
              "match": "(RETURN|CONTINUE|Lexeme[_a-zA-Z]*)",
              "name": "keyword.control.qx"
            },
            {
              "match": "([_a-zA-Z][_a-zA-Z0-9]*)",
              "name": "support.type.property-name.qx"
            }
          ]
        }
      ]
    },
    "mode.pre": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "entity.name.section.qx"
            },
            "2": {
              "name": "entity.other.attribute-name.id.qx"
            },
            "3": {
              "name": "punctuation.separator.qx"
            }
          },
          "match": "(^\\s*mode\\s*)([_a-zA-Z][_a-zA-Z0-9]*\\s*)(:\\s*)"
        },
        {
          "match": "(?:^)(\\s*[_a-zA-Z][_a-zA-Z0-9]*)+(?:$)",
          "name": "entity.other.attribute-name.qx"
        },
        {
          "begin": "(\\<)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.group.begin.qx"
            }
          },
          "end": "(\\>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.group.end.qx"
            }
          },
          "patterns": [
            {
              "captures": {
                "1": {
                  "name": "support.type.qx"
                },
                "2": {
                  "name": "punctuation.separator.qx"
                },
                "3": {
                  "name": "variable.other.qx"
                }
              },
              "match": "([^\\x{003a}]+)(:)(\\s*[_a-zA-Z][_a-zA-Z0-9]*\\s*)"
            }
          ]
        }
      ]
    },
    "mode.section": {
      "patterns": [
        {
          "begin": "(^\\{)",
          "beginCaptures": {
            "1": {
              "name": "meta.brace.curly.begin.qx"
            }
          },
          "end": "(^\\})",
          "endCaptures": {
            "1": {
              "name": "meta.brace.curly.end.qx"
            }
          },
          "patterns": [
            {
              "match": "(on_failure|FAIL|on_end_of_stream|EOF)",
              "name": "entity.name.tag"
            },
            {
              "match": "([=\\*+-]|=>|[><][><]*)",
              "name": "keyword.operator.logical.qx"
            },
            {
              "include": "#mode.code"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "(0[bB][0-1]+|0[oO][0-7]+|0[xX][a-fA-F0-9]+|[1-9]\\d*|0)",
          "name": "constant.numeric.qx"
        }
      ]
    },
    "other": {
      "patterns": [
        {
          "begin": "^\\s*(token_type|repeated_token|body|init|reset|memento|memento_pack|memento_unpack)\\s*(\\{)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.section.quex"
            },
            "2": {
              "name": "meta.brace.curly.begin.qx"
            }
          },
          "end": "(^\\})",
          "endCaptures": {
            "1": {
              "name": "meta.brace.curly.end.qx"
            }
          },
          "contentName": "meta.block",
          "patterns": [
            {
              "include": "source.cpp"
            }
          ]
        }
      ]
    },
    "mode.start": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "variable.language.this.qx"
            },
            "2": {
              "name": "keyword.operator.assignment.qx"
            },
            "3": {
              "name": "constant.other.symbol.qx"
            }
          },
          "match": "(^\\s*start)(\\s*=\\s*)([_a-zA-Z][_a-zA-Z0-9]*)"
        }
      ]
    },
    "token.section": {
      "patterns": [
        {
          "begin": "(^\\s*token\\s*)(\\{)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.section.qx"
            },
            "2": {
              "name": "meta.brace.curly.begin.qx"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "meta.brace.curly.end.qx"
            }
          },
          "patterns": [
            {
              "include": "#token.block"
            }
          ]
        }
      ]
    },
    "token.block": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "storage.qx"
            },
            "2": {
              "name": "punctuation.terminator.statement.qx"
            }
          },
          "match": "([_a-zA-Z][_a-zA-Z0-9]*)(\\s*;)"
        },
        {
          "include": "#lit"
        }
      ]
    }
  },
  "scopeName": "source.qx",
  "uuid": "b410b18d-787a-4a3f-bef9-3bcf2fc7b8eb"
}
